#!/usr/bin/env node
/**
 * generate models from multi spec files.
 */
const path = require('path');
const program = require('commander');
const Swagger = require('swagger-client');
const _ = require('lodash');

const ModelGenerator = require('../src/tools/model_generator');
const { resolvePath, mkdirpPromise, readSpecFile } = require('../src/tools/utils');

program
  .option('-c, --config <configPath>', 'config path')
  .arguments('...<files>')
  .parse(process.argv);
const specFiles = program.args;

const userConfig = program.config ? require(resolvePath(program.config)) : {};
const defaultConfig = require(path.join(__dirname, '../config/parser-config-default.js'));
const config = Object.assign({}, defaultConfig, userConfig);
console.info(`parse file: ${specFiles}`);

if (_.isEmpty(specFiles)) {
  console.error('need spec files');
  process.exit(1);
}

const outputDir = config.outputDir || 'dist';
const outputBaseDir = `${outputDir}/base` || 'dist';
const attributeConverter = config.attributeConverter ? config.attributeConverter : str => str;
const nameList = [];
let isV2;

Promise.all(
  specFiles.map((file) => Swagger({spec: readSpecFile(file)}).then(({spec}) => filter(spec)))
).then((models) => {
  models = _.merge(...models);
  const modelGenerator = new ModelGenerator({
    outputDir,
    outputBaseDir,
    templatePath: config.templates,
    usePropType: config.usePropType,
    useFlow: config.useFlow,
    isV2, attributeConverter,
  });
  mkdirpPromise(outputBaseDir).then(() => {
    Promise.all(_.map(models, (model, name) => modelGenerator.writeModel(model, name))).then((modelNames) => {
      modelGenerator.writeIndex(_.uniq(_.compact(modelNames)));
    });
  });
}).catch((e) => console.error(`Failed!: ${e}`));

function isSpecV2(spec) {
  const isSpecV2 = spec.swagger === '2.0';
  if (_.isNil(isV2)) {
    isV2 = isSpecV2;
    return isV2;
  }
  if (isV2 !== isSpecV2) {
    throw 'multi version!';
  }
  isV2 = isSpecV2;
  return isV2;
}

function filter(spec) {
  const models = isSpecV2(spec) ? spec.definitions : spec.components.schemas;
  return _.reduce(models, (acc, value, key) => {
    if (nameList.includes(key)) {
      console.warn('duplicate model', key);
      process.exit(1);
    }
    acc[key] = value;
    nameList.push(key);
    return acc;
  }, {});
}

