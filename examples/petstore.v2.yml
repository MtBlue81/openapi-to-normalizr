swagger: "2.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 2.0 specification
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /pets:
    x-swagger-router-controller: pets
    get:
      description: |
        Returns all pets from the system that the user has access to
      operationId: get_pets
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/PetsResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: post_pets
      parameters:
        - name: requestBody
          in: body
          description: Pet to add to the store
          required: true
          schema:
            $ref: '#/definitions/PetRequest'
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pets/{id}:
    x-swagger-router-controller: pets___id__
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: get_pets___id__
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          type: integer
          format: int64
        - name: error # for test
          in: query
          description: dummy parmeter for error pattern test
          type: boolean
          default: false
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: delete_pets___id__
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: pet deleted
          schema:
            type: object
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
# complex objects have schema definitions
definitions:
  PetsResponse:
    type: array
    items:
      allOf:
       - $ref: '#/definitions/Pet'
       - required:
         - id

  PetRequest:
    type: object
    properties:
      object_type:
        type: string
        enum:
          - Dog
          - Cat
      name:
        type: string
      tag:
        type: string
        default: no tag

  Pet:
    required:
      - id
      - name
      - object_type
    properties:
      object_type:
        type: string
        enum:
          - Dog
          - Cat
      name:
        type: string
      tag:
        type: string
        default: no tag
      id:
        type: integer
        format: int64
      owner:
        $ref: '#/definitions/Person'
  Person:
    x-id-attribute: person_id
    properties:
      name:
        type: string
      email:
        type: string
      person_id:
        type: integer
        format: int64
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
