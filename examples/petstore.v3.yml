openapi: 3.0.0
servers:
  - url: 'http://localhost:10010'
  - url: 'https://localhost:10010'
info:
  version: 1.0.0
  title: Swagger Petstore
  description: >-
    A sample API that uses a petstore as an example to demonstrate features in
    the OpenAPI 3.0 specification
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
tags:
  - name: default
    description: default API
  - name: pet
    description: pet API
paths:
  /pets:
    get:
      description: |
        Returns all pets from the system that the user has access to
      tags:
        - pet
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          $ref: '#/components/responses/PetsResponse'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      description: Creates a new pet in the store.
      tags:
        - pet
      responses:
        '201':
          $ref: '#/components/responses/PetResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: Pet to add to the store
        $ref: '#/components/requestBodies/PetRequest'
        required: true
  '/pets/{id}':
    get:
      description: >-
        Returns a user based on a single ID, if the user does not have access to
        the pet
      tags:
        - pet
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
        - name: error # for test
          in: query
          description: dummy parameter for error pattern test
          schema:
            type: boolean
            default: false
      responses:
        '200':
          $ref: '#/components/responses/PetResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      tags:
        - pet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet deleted
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  responses:
    PetsResponse:
      description: pet response
      content:
        application/json:
          schema:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/Dog'
                - $ref: '#/components/schemas/Cat'
              discriminator:
                propertyName: object_type
                mapping:
                  1: '#/components/schemas/Dog'
                  2: '#/components/schemas/Cat'
    PetResponse:
      description: pet response
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Dog'
              - $ref: '#/components/schemas/Cat'
            discriminator:
              propertyName: object_type
              mapping:
                1: '#/components/schemas/Dog'
                2: '#/components/schemas/Cat'
  requestBodies:
    PetRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              object_type:
                type: string
                enum:
                  - Dog
                  - Cat
              name:
                type: string
              tag:
                type: string
                default: no tag
  schemas:
    Dog:
      allOf:
        - $ref: '#/components/schemas/Pet'
        - properties:
            object_type:
              type: integer
              format: int32
              default: 1
    Cat:
      allOf:
        - $ref: '#/components/schemas/Pet'
        - properties:
            object_type:
              type: integer
              format: int32
              default: 2
    Pet:
      required:
        - id
        - name
        - object_type
      properties:
        object_type:
          type: integer
          format: int32
          x-enum-key-attributes:
            - Dog
            - Cat
          enum:
            - 1
            - 2
        name:
          type: string
        tag:
          type: string
          default: no tag
        id:
          type: integer
          format: int64
        places:
          type: array
          items:
            type: string
        companies:
          type: array
          items:
            $ref: '#/components/schemas/Company'
        owner:
          $ref: '#/components/schemas/Person'
    Person:
      x-id-attribute: person_id
      properties:
        name:
          type: string
        email:
          type: string
        person_id:
          type: integer
          format: int64
    Company:
      x-id-attribute: company_id
      properties:
        name:
          type: string
        email:
          type: string
        company_id:
          type: integer
          format: int64
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
