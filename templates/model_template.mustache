{{#useFlow}}
// @flow
{{/useFlow}}
{{>head}}
{{#usePropTypes}}
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
{{/usePropTypes}}
import { Record, List } from 'immutable';
import { schema as _schema, denormalize as _denormalize } from 'normalizr';
import isArray from 'lodash/isArray';
{{#importList}}
import {{#useFlow}}{{name}}, {{/useFlow}}{ schema as {{schemaName}}{{#usePropTypes}}, propTypes as {{name}}PropType{{/usePropTypes}} } from './{{&filePath}}';
{{/importList}}

{{#props}}
{{#enumObjects}}
export const {{name}}{{#useFlow}}: {{enumType}}{{/useFlow}} = {{#isValueString}}'{{value}}'{{/isValueString}}{{^isValueString}}{{value}}{{/isValueString}};
{{/enumObjects}}
{{/props}}

const defaultValues = {
{{#props}}
  {{&name}}: {{&getDefaults}},
{{/props}}
};

export const schema = new _schema.Entity('{{name}}'{{#idAttribute}}, {}, {idAttribute: {{&idAttribute}}}{{/idAttribute}});
{{>oneOf}}
{{>dependency}}

{{#usePropTypes}}
export const propTypesObject = {
{{#props}}
  {{&name}}: {{&getPropTypes}}{{#required}}.isRequired{{/required}},
{{/props}}
};
export const propTypes = PropTypes.shape(propTypesObject);
{{/usePropTypes}}

/**
 * @params ids : {{name}}'s id[s]
 * @params entities : all entities that need to denormalize ids
 */
export const denormalize = (ids{{#useFlow}}: number[] | string[]{{/useFlow}}, entities{{#useFlow}}: any{{/useFlow}}) => _denormalize(ids, isArray(ids) || List.isList(ids) ? [schema] : schema, entities);

export default class {{name}} extends Record(defaultValues) {
{{#useFlow}}
{{#props}}
  {{&name}}: {{&getFlowTypes}};
{{/props}}
{{/useFlow}}
  static denoromalize(id{{#useFlow}}: number[] | string[]{{/useFlow}}, entities{{#useFlow}}: any{{/useFlow}}) {
    return denormalize(id, entities);
  }
{{#props}}
{{#alias}}
  // created by 'x-attribute-as'
  get {{&alias}}() {
    return this.get('{{&alias}}', this.{{name}});
  }
{{/alias}}
{{/props}}
}
